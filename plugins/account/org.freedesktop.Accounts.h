/*
 * Generated by gdbus-codegen 2.54.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ORG_FREEDESKTOP_ACCOUNTS_H__
#define __ORG_FREEDESKTOP_ACCOUNTS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Accounts */

#define GSD_TYPE_ACCOUNTS (gsd_accounts_get_type ())
#define GSD_ACCOUNTS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSD_TYPE_ACCOUNTS, GsdAccounts))
#define GSD_IS_ACCOUNTS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSD_TYPE_ACCOUNTS))
#define GSD_ACCOUNTS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GSD_TYPE_ACCOUNTS, GsdAccountsIface))

struct _GsdAccounts;
typedef struct _GsdAccounts GsdAccounts;
typedef struct _GsdAccountsIface GsdAccountsIface;

struct _GsdAccountsIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_cache_user) (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_create_user) (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_fullname,
    gint arg_accountType);

  gboolean (*handle_delete_user) (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_id,
    gboolean arg_removeFiles);

  gboolean (*handle_find_user_by_id) (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_id);

  gboolean (*handle_find_user_by_name) (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_list_cached_users) (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_uncache_user) (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  const gchar * (*get_daemon_version) (GsdAccounts *object);

  gboolean  (*get_has_multiple_users) (GsdAccounts *object);

  gboolean  (*get_has_no_users) (GsdAccounts *object);

  void (*user_added) (
    GsdAccounts *object,
    const gchar *arg_user);

  void (*user_deleted) (
    GsdAccounts *object,
    const gchar *arg_user);

};

GType gsd_accounts_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gsd_accounts_interface_info (void);
guint gsd_accounts_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gsd_accounts_complete_list_cached_users (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *users);

void gsd_accounts_complete_find_user_by_id (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void gsd_accounts_complete_find_user_by_name (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void gsd_accounts_complete_create_user (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void gsd_accounts_complete_cache_user (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void gsd_accounts_complete_uncache_user (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation);

void gsd_accounts_complete_delete_user (
    GsdAccounts *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gsd_accounts_emit_user_added (
    GsdAccounts *object,
    const gchar *arg_user);

void gsd_accounts_emit_user_deleted (
    GsdAccounts *object,
    const gchar *arg_user);



/* D-Bus method calls: */
void gsd_accounts_call_list_cached_users (
    GsdAccounts *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsd_accounts_call_list_cached_users_finish (
    GsdAccounts *proxy,
    gchar ***out_users,
    GAsyncResult *res,
    GError **error);

gboolean gsd_accounts_call_list_cached_users_sync (
    GsdAccounts *proxy,
    gchar ***out_users,
    GCancellable *cancellable,
    GError **error);

void gsd_accounts_call_find_user_by_id (
    GsdAccounts *proxy,
    gint64 arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsd_accounts_call_find_user_by_id_finish (
    GsdAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean gsd_accounts_call_find_user_by_id_sync (
    GsdAccounts *proxy,
    gint64 arg_id,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void gsd_accounts_call_find_user_by_name (
    GsdAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsd_accounts_call_find_user_by_name_finish (
    GsdAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean gsd_accounts_call_find_user_by_name_sync (
    GsdAccounts *proxy,
    const gchar *arg_name,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void gsd_accounts_call_create_user (
    GsdAccounts *proxy,
    const gchar *arg_name,
    const gchar *arg_fullname,
    gint arg_accountType,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsd_accounts_call_create_user_finish (
    GsdAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean gsd_accounts_call_create_user_sync (
    GsdAccounts *proxy,
    const gchar *arg_name,
    const gchar *arg_fullname,
    gint arg_accountType,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void gsd_accounts_call_cache_user (
    GsdAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsd_accounts_call_cache_user_finish (
    GsdAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean gsd_accounts_call_cache_user_sync (
    GsdAccounts *proxy,
    const gchar *arg_name,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void gsd_accounts_call_uncache_user (
    GsdAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsd_accounts_call_uncache_user_finish (
    GsdAccounts *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gsd_accounts_call_uncache_user_sync (
    GsdAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void gsd_accounts_call_delete_user (
    GsdAccounts *proxy,
    gint64 arg_id,
    gboolean arg_removeFiles,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsd_accounts_call_delete_user_finish (
    GsdAccounts *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gsd_accounts_call_delete_user_sync (
    GsdAccounts *proxy,
    gint64 arg_id,
    gboolean arg_removeFiles,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *gsd_accounts_get_daemon_version (GsdAccounts *object);
gchar *gsd_accounts_dup_daemon_version (GsdAccounts *object);
void gsd_accounts_set_daemon_version (GsdAccounts *object, const gchar *value);

gboolean gsd_accounts_get_has_no_users (GsdAccounts *object);
void gsd_accounts_set_has_no_users (GsdAccounts *object, gboolean value);

gboolean gsd_accounts_get_has_multiple_users (GsdAccounts *object);
void gsd_accounts_set_has_multiple_users (GsdAccounts *object, gboolean value);


/* ---- */

#define GSD_TYPE_ACCOUNTS_PROXY (gsd_accounts_proxy_get_type ())
#define GSD_ACCOUNTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSD_TYPE_ACCOUNTS_PROXY, GsdAccountsProxy))
#define GSD_ACCOUNTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GSD_TYPE_ACCOUNTS_PROXY, GsdAccountsProxyClass))
#define GSD_ACCOUNTS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GSD_TYPE_ACCOUNTS_PROXY, GsdAccountsProxyClass))
#define GSD_IS_ACCOUNTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSD_TYPE_ACCOUNTS_PROXY))
#define GSD_IS_ACCOUNTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GSD_TYPE_ACCOUNTS_PROXY))

typedef struct _GsdAccountsProxy GsdAccountsProxy;
typedef struct _GsdAccountsProxyClass GsdAccountsProxyClass;
typedef struct _GsdAccountsProxyPrivate GsdAccountsProxyPrivate;

struct _GsdAccountsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GsdAccountsProxyPrivate *priv;
};

struct _GsdAccountsProxyClass
{
  GDBusProxyClass parent_class;
};

GType gsd_accounts_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GsdAccountsProxy, g_object_unref)
#endif

void gsd_accounts_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GsdAccounts *gsd_accounts_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GsdAccounts *gsd_accounts_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gsd_accounts_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GsdAccounts *gsd_accounts_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GsdAccounts *gsd_accounts_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GSD_TYPE_ACCOUNTS_SKELETON (gsd_accounts_skeleton_get_type ())
#define GSD_ACCOUNTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSD_TYPE_ACCOUNTS_SKELETON, GsdAccountsSkeleton))
#define GSD_ACCOUNTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GSD_TYPE_ACCOUNTS_SKELETON, GsdAccountsSkeletonClass))
#define GSD_ACCOUNTS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GSD_TYPE_ACCOUNTS_SKELETON, GsdAccountsSkeletonClass))
#define GSD_IS_ACCOUNTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSD_TYPE_ACCOUNTS_SKELETON))
#define GSD_IS_ACCOUNTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GSD_TYPE_ACCOUNTS_SKELETON))

typedef struct _GsdAccountsSkeleton GsdAccountsSkeleton;
typedef struct _GsdAccountsSkeletonClass GsdAccountsSkeletonClass;
typedef struct _GsdAccountsSkeletonPrivate GsdAccountsSkeletonPrivate;

struct _GsdAccountsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GsdAccountsSkeletonPrivate *priv;
};

struct _GsdAccountsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gsd_accounts_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GsdAccountsSkeleton, g_object_unref)
#endif

GsdAccounts *gsd_accounts_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_ACCOUNTS_H__ */
